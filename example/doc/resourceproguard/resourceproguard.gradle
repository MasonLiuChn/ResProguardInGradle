def resProguardworkingDir = "${project.projectDir}/doc/resourceproguard"
def resProguardzipalignPath = "${resProguardworkingDir}/zipalign"

def resProguardsignatureFilePath = ""
def resProguardstorepassValue = ""
def resProguardkeypassValue = ""
def resProguardstorealiasValue = ""

def resouceProguardTask = {
    def variantName ->
        def inputApkPath = "${project.buildDir}/outputs/apk/${project.name}-${variantName}.apk"
        def outputPath = "${project.buildDir}/resourceproguard"
        File outputApkFile = new File("${outputPath}/${project.name}-${variantName}_signed_aligned.apk")
        File outputApk7zipFile = new File("${outputPath}/${project.name}-${variantName}_signed_7zip_aligned.apk")
        project.exec {
            workingDir "${resProguardworkingDir}"
            executable "java"
            args "-jar", "resourceproguard.jar", "${inputApkPath}", "-out", "${outputPath}", "-signature", "${resProguardsignatureFilePath}", "${resProguardstorepassValue}", "${resProguardkeypassValue}", "${resProguardstorealiasValue}", "-zipalign", "${resProguardzipalignPath}"
        }
        if (outputApk7zipFile.exists()) {
            outputApk7zipFile.renameTo(new File("${inputApkPath}"));
            println "resources proguard apk replace done, you can go to file to find the output ${inputApkPath}"
        } else if (outputApkFile.exists()) {
            outputApkFile.renameTo(new File("${inputApkPath}"));
            println "resources proguard apk replace done, you can go to file to find the output ${inputApkPath}"
        }
}

afterEvaluate {
    tasks.withType(Task).each { task ->
        task.doLast {
            if (task.name.startsWith("assemble")) {
                resouceProguardTask(task.name.replace("assemble", "").toLowerCase())
            }
        }
//        support flavor
//        tasks.assembleFlavorExampleRelease << {
//            resouceProguardTask("flavorExample-release")
//        }

        if(task.name.startsWith("validate")&& task.name.endsWith("Signing")){
            task  << {
                resProguardstorealiasValue = signingConfig.getKeyAlias()
                resProguardstorepassValue = signingConfig.getStorePassword()
                resProguardkeypassValue = signingConfig.getKeyPassword()
                resProguardsignatureFilePath = signingConfig.getStoreFile().getAbsolutePath()
            }
        }
    }

}







